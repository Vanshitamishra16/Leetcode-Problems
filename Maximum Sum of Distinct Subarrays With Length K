class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        long sum = 0,ans=0;

       if(nums.length==1)
         return nums[0];

        Map<Integer, Integer> map = new HashMap<>();
        for(int i=0;i<k;i++){
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            sum += (long)nums[i];
        }

        if(map.size()==k)
        ans = sum;
        
        int left = 0;
        for(int i=k;i<nums.length;i++){
            sum += (long)nums[i];
            sum -= (long)nums[left];

            map.put(nums[left],map.get(nums[left])-1);
            if(map.get(nums[left])==0)
             map.remove(nums[left]);
            
            map.put(nums[i],map.getOrDefault(nums[i],0)+1);
            left++;

            if(map.size()==k){
                ans = Math.max(ans,sum);
            }

        }
        return ans;
        
        }
}
